MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_project_stage2.sh" failed

STDOUT:
-- The C compiler identification is unknown
-- The CXX compiler identification is unknown
-- The ASM compiler identification is Clang with GNU-like command-line
-- Found assembler: /tmp/llvm-project-build-stage1/bin/clang
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - failed
-- Check for working C compiler: /tmp/llvm-project-build-stage1/bin/clang
-- Check for working C compiler: /tmp/llvm-project-build-stage1/bin/clang - broken
-- Configuring incomplete, errors occurred!
See also "/tmp/llvm-project-build-stage2/CMakeFiles/CMakeOutput.log".
See also "/tmp/llvm-project-build-stage2/CMakeFiles/CMakeError.log".


STDERR:
CMake Error at /usr/share/cmake-3.22/Modules/CMakeTestCCompiler.cmake:69 (message):
  The C compiler

    "/tmp/llvm-project-build-stage1/bin/clang"

  is not able to compile a simple test program.

  It fails with the following output:

    Change Dir: /tmp/llvm-project-build-stage2/CMakeFiles/CMakeTmp
    
    Run Build Command(s):/usr/bin/ninja cmTC_b44f1 && [1/2] Building C object CMakeFiles/cmTC_b44f1.dir/testCCompiler.c.o
    FAILED: CMakeFiles/cmTC_b44f1.dir/testCCompiler.c.o 
    /tmp/llvm-project-build-stage1/bin/clang    -o CMakeFiles/cmTC_b44f1.dir/testCCompiler.c.o -c /tmp/llvm-project-build-stage2/CMakeFiles/CMakeTmp/testCCompiler.c
    PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
    Stack dump:
    0.	Program arguments: /tmp/llvm-project-build-stage1/bin/clang -o CMakeFiles/cmTC_b44f1.dir/testCCompiler.c.o -c /tmp/llvm-project-build-stage2/CMakeFiles/CMakeTmp/testCCompiler.c
    1.	<eof> parser at end of file
    2.	Code generation
    3.	Running pass 'Function Pass Manager' on module '/tmp/llvm-project-build-stage2/CMakeFiles/CMakeTmp/testCCompiler.c'.
    4.	Running pass 'X86 DAG->DAG Instruction Selection' on function '@main'
    Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
    0  clang     0x000055df54a22350 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 240
    1  clang     0x000055df54a1ff04 llvm::sys::CleanupOnSignal(unsigned long) + 164
    2  clang     0x000055df549717c8
    3  libc.so.6 0x00007f6d35f79520
    4  clang     0x000055df53c5b410 llvm::TargetTransformInfoWrapperPass::getTTI(llvm::Function const&) + 48
    5  clang     0x000055df55e4c383 llvm::SelectionDAGISel::initializeAnalysisResults(llvm::MachineFunctionPass&) + 1219
    6  clang     0x000055df55e4cac0 llvm::SelectionDAGISelLegacy::runOnMachineFunction(llvm::MachineFunction&) + 384
    7  clang     0x000055df53ec412d llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 493
    8  clang     0x000055df54485512 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1666
    9  clang     0x000055df544856d4 llvm::FPPassManager::runOnModule(llvm::Module&) + 52
    10 clang     0x000055df54486104 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 1060
    11 clang     0x000055df54cb1602
    12 clang     0x000055df54cb20d3 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 2275
    13 clang     0x000055df5532f1f7 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 1559
    14 clang     0x000055df567951bc clang::ParseAST(clang::Sema&, bool, bool) + 1164
    15 clang     0x000055df5567092e clang::FrontendAction::Execute() + 46
    16 clang     0x000055df555e185b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 555
    17 clang     0x000055df5574b1ac clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 364
    18 clang     0x000055df5325df8a cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7178
    19 clang     0x000055df532557b2
    20 clang     0x000055df553a40ed
    21 clang     0x000055df54971bf7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 39
    22 clang     0x000055df553a4487
    23 clang     0x000055df553667d1 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 177
    24 clang     0x000055df55367849 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 153
    25 clang     0x000055df5537c45f clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 543
    26 clang     0x000055df5325a2d5 clang_main(int, char**, llvm::ToolContext const&) + 7509
    27 clang     0x000055df5316029b main + 107
    28 libc.so.6 0x00007f6d35f60d90
    29 libc.so.6 0x00007f6d35f60e40 __libc_start_main + 128
    30 clang     0x000055df53255215 _start + 37
    clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
    clang version 21.0.0git
    Target: x86_64-unknown-linux-gnu
    Thread model: posix
    InstalledDir: /tmp/llvm-project-build-stage1/bin
    clang: note: diagnostic msg: 
    ********************
    
    PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
    Preprocessed source(s) and associated run script(s) are located at:
    clang: note: diagnostic msg: /tmp/testCCompiler-512404.c
    clang: note: diagnostic msg: /tmp/testCCompiler-512404.sh
    clang: note: diagnostic msg: 
    
    ********************
    ninja: build stopped: subcommand failed.
    
    

  

  CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
  CMakeLists.txt:46 (project)


