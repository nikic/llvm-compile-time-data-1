MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O0-g stage2" failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O0-g.cmake
-- The C compiler identification is Clang 20.0.0
-- The CXX compiler identification is Clang 20.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage2/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: x86
-- Check target system architecture: unknown
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating HashProgramOutput.sh
[3/671] Generating timeit
[4/671] Generating timeit-target
[5/671] Generating __init__.py
[6/671] Generating modules/__init__.py
[7/671] Generating modules/codesize.py
[8/671] Generating modules/compiletime.py
[9/671] Generating modules/hash.py
[10/671] Generating modules/microbenchmark.py
[11/671] Generating modules/perf.py
[12/671] Generating modules/hpmcount.py
[13/671] Generating modules/profilegen.py
[14/671] Generating modules/remote.py
[15/671] Generating modules/run_under.py
[16/671] Generating modules/run.py
[17/671] Generating modules/stats.py
[18/671] Generating modules/timeit.py
[19/671] Generating shellcommand.py
[20/671] Generating test.py
[21/671] Generating testfile.py
[22/671] Generating testplan.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
FAILED: tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o 
/tmp/llvm-project-build-stage2/bin/clang -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c'.
4.	Running pass 'X86 Assembly Printer' on function '@load_file'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000556b3d8ef208 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x0000556b3d8ec69e llvm::sys::RunSignalHandlers() + 238
2  clang     0x0000556b3d850ca7
3  libc.so.6 0x00007f07097f5520
4  clang     0x0000556b3ea13b1c llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 796
5  clang     0x0000556b3e9dde4d llvm::AsmPrinter::emitFunctionBody() + 2957
6  clang     0x0000556b3c6403eb
7  clang     0x0000556b3cdffa89 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 761
8  clang     0x0000556b3d380a5f llvm::FPPassManager::runOnFunction(llvm::Function&) + 1359
9  clang     0x0000556b3d389f83 llvm::FPPassManager::runOnModule(llvm::Module&) + 51
10 clang     0x0000556b3d381987 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 2951
11 clang     0x0000556b3e1bc021 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8081
12 clang     0x0000556b3e1d5d1d clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2989
13 clang     0x0000556b3f815589 clang::ParseAST(clang::Sema&, bool, bool) + 937
14 clang     0x0000556b3e711b74 clang::FrontendAction::Execute() + 84
15 clang     0x0000556b3e602ff0 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1216
16 clang     0x0000556b3e815782 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
17 clang     0x0000556b3c634464 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7988
18 clang     0x0000556b3c6309ff
19 clang     0x0000556b3e4652a9
20 clang     0x0000556b3d850868 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
21 clang     0x0000556b3e464ef4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
22 clang     0x0000556b3e426ad0 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 560
23 clang     0x0000556b3e4432bc clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
24 clang     0x0000556b3c62fef9 clang_main(int, char**, llvm::ToolContext const&) + 7209
25 clang     0x0000556b3c64025a main + 90
26 libc.so.6 0x00007f07097dcd90
27 libc.so.6 0x00007f07097dce40 __libc_start_main + 128
28 clang     0x0000556b3c622825 _start + 37
clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 20.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang: note: diagnostic msg: /tmp/fpcmp-359eec.c
clang: note: diagnostic msg: /tmp/fpcmp-359eec.sh
clang: note: diagnostic msg: 

********************
[26/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
FAILED: tools/CMakeFiles/not.dir/not.cpp.o 
/tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp'.
4.	Running pass 'X86 Assembly Printer' on function '@__cxx_global_var_init'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x0000563ef9d82208 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang++   0x0000563ef9d7f69e llvm::sys::RunSignalHandlers() + 238
2  clang++   0x0000563ef9ce3ca7
3  libc.so.6 0x00007f23e5499520
4  clang++   0x0000563efaea6b1c llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 796
5  clang++   0x0000563efae70e4d llvm::AsmPrinter::emitFunctionBody() + 2957
6  clang++   0x0000563ef8ad33eb
7  clang++   0x0000563ef9292a89 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 761
8  clang++   0x0000563ef9813a5f llvm::FPPassManager::runOnFunction(llvm::Function&) + 1359
9  clang++   0x0000563ef981cf83 llvm::FPPassManager::runOnModule(llvm::Module&) + 51
10 clang++   0x0000563ef9814987 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 2951
11 clang++   0x0000563efa64f021 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8081
12 clang++   0x0000563efa668d1d clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2989
13 clang++   0x0000563efbca8589 clang::ParseAST(clang::Sema&, bool, bool) + 937
14 clang++   0x0000563efaba4b74 clang::FrontendAction::Execute() + 84
15 clang++   0x0000563efaa95ff0 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1216
16 clang++   0x0000563efaca8782 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
17 clang++   0x0000563ef8ac7464 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7988
18 clang++   0x0000563ef8ac39ff
19 clang++   0x0000563efa8f82a9
20 clang++   0x0000563ef9ce3868 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
21 clang++   0x0000563efa8f7ef4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
22 clang++   0x0000563efa8b9ad0 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 560
23 clang++   0x0000563efa8d62bc clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
24 clang++   0x0000563ef8ac2ef9 clang_main(int, char**, llvm::ToolContext const&) + 7209
25 clang++   0x0000563ef8ad325a main + 90
26 libc.so.6 0x00007f23e5480d90
27 libc.so.6 0x00007f23e5480e40 __libc_start_main + 128
28 clang++   0x0000563ef8ab5825 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 20.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/not-e753b5.cpp
clang++: note: diagnostic msg: /tmp/not-e753b5.sh
clang++: note: diagnostic msg: 

********************
[27/671] Generating sqlite test inputs
ninja: build stopped: subcommand failed.


STDERR:
