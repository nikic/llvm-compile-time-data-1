MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O3 stage2" failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O3.cmake
-- The C compiler identification is Clang 21.0.0
-- The CXX compiler identification is Clang 21.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage2/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: x86
-- Check target system architecture: unknown
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating HashProgramOutput.sh
[3/671] Generating timeit
[4/671] Generating timeit-target
[5/671] Generating __init__.py
[6/671] Generating modules/__init__.py
[7/671] Generating modules/codesize.py
[8/671] Generating modules/compiletime.py
[9/671] Generating modules/hash.py
[10/671] Generating modules/hpmcount.py
[11/671] Generating modules/microbenchmark.py
[12/671] Generating modules/perf.py
[13/671] Generating modules/run.py
[14/671] Generating modules/remote.py
[15/671] Generating modules/profilegen.py
[16/671] Generating modules/run_under.py
[17/671] Generating modules/stats.py
[18/671] Generating shellcommand.py
[19/671] Generating modules/timeit.py
[20/671] Generating test.py
[21/671] Generating testplan.py
[22/671] Generating testfile.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
[26/671] Linking C executable tools/fpcmp-target
[27/671] Generating sqlite test inputs
[28/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/myWindows/wine_date_and_time.cpp.o
[29/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
FAILED: tools/CMakeFiles/not.dir/not.cpp.o 
/tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG  -O3   -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG -O3 -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp'.
4.	Running pass 'Machine Instruction Scheduler' on function '@main'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x00005573b6324728 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang++   0x00005573b6321bee llvm::sys::RunSignalHandlers() + 238
2  clang++   0x00005573b6286357
3  libc.so.6 0x00007f0cd696c520
4  clang++   0x00005573b59e932f llvm::ScheduleDAGTopologicalSort::IsReachable(llvm::SUnit const*, llvm::SUnit const*) + 255
5  clang++   0x00005573b59f13f8 llvm::ScheduleDAGInstrs::addEdge(llvm::SUnit*, llvm::SDep const&) + 56
6  clang++   0x00005573b58e776c llvm::fuseInstructionPair(llvm::ScheduleDAGInstrs&, llvm::SUnit&, llvm::SUnit&) + 380
7  clang++   0x00005573b58e7b93
8  clang++   0x00005573b588172c llvm::ScheduleDAGMILive::schedule() + 60
9  clang++   0x00005573b588bb49
10 clang++   0x00005573b588b167
11 clang++   0x00005573b581d213 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 755
12 clang++   0x00005573b5da8994 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1348
13 clang++   0x00005573b5db20e3 llvm::FPPassManager::runOnModule(llvm::Module&) + 51
14 clang++   0x00005573b5da99e9 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 3257
15 clang++   0x00005573b6be8d4a clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8090
16 clang++   0x00005573b6c03f7c clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2908
17 clang++   0x00005573b82688a9 clang::ParseAST(clang::Sema&, bool, bool) + 937
18 clang++   0x00005573b71123ed clang::FrontendAction::Execute() + 29
19 clang++   0x00005573b704ae60 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1184
20 clang++   0x00005573b72191b2 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
21 clang++   0x00005573b502856f cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8239
22 clang++   0x00005573b50249bf
23 clang++   0x00005573b6ea8289
24 clang++   0x00005573b6285f18 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
25 clang++   0x00005573b6ea7ed4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
26 clang++   0x00005573b6e66498 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
27 clang++   0x00005573b6e8514c clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
28 clang++   0x00005573b5023f19 clang_main(int, char**, llvm::ToolContext const&) + 7369
29 clang++   0x00005573b503458a main + 90
30 libc.so.6 0x00007f0cd6953d90
31 libc.so.6 0x00007f0cd6953e40 __libc_start_main + 128
32 clang++   0x00005573b50167a5 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/not-7dc6a8.cpp
clang++: note: diagnostic msg: /tmp/not-7dc6a8.sh
clang++: note: diagnostic msg: 

********************
[30/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/myWindows/myGetTickCount.cpp.o
[31/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/myWindows/myAddExeFlag.cpp.o
[32/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/myWindows/mySplitCommandLine.cpp.o
[33/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/BenchCon.cpp.o
[34/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ConsoleClose.cpp.o
[35/671] Building CXX object CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o
FAILED: CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o 
/tmp/llvm-test-suite-build/tools/timeit --summary CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o.time /tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG  -O3   -w -Werror=date-time -DBREAK_HANDLER -DUNICODE -D_UNICODE -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/C -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/myWindows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/include_windows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP -I. -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DNDEBUG -D_REENTRANT -DENV_UNIX -D_7ZIP_LARGE_PAGES -pthread -Wno-error=narrowing -DBREAK_HANDLER -DUNICODE -D_UNICODE -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/C -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/myWindows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/include_windows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP -I. -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DNDEBUG -D_REENTRANT -DENV_UNIX -D_7ZIP_LARGE_PAGES -pthread -MD -MT CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o -MF CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o.d -o CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG -O3 -w -Werror=date-time -DBREAK_HANDLER -DUNICODE -D_UNICODE -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/C -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/myWindows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/include_windows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP -I. -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DNDEBUG -D_REENTRANT -DENV_UNIX -D_7ZIP_LARGE_PAGES -pthread -Wno-error=narrowing -DBREAK_HANDLER -DUNICODE -D_UNICODE -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/C -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/myWindows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/include_windows -I/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP -I. -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DNDEBUG -D_REENTRANT -DENV_UNIX -D_7ZIP_LARGE_PAGES -pthread -MD -MT CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o -MF CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o.d -o CTMark/7zip/CMakeFiles/7zip-benchmark.dir/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/CTMark/7zip/CPP/7zip/UI/Console/ExtractCallbackConsole.cpp'.
4.	Running pass 'Machine Instruction Scheduler' on function '@_ZN23CExtractCallbackConsole7ReleaseEv'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x000055910585e728 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang++   0x000055910585bbee llvm::sys::RunSignalHandlers() + 238
2  clang++   0x00005591057c0357
3  libc.so.6 0x00007fd1d0c9a520
4  clang++   0x0000559104f2332f llvm::ScheduleDAGTopologicalSort::IsReachable(llvm::SUnit const*, llvm::SUnit const*) + 255
5  clang++   0x0000559104f2b3f8 llvm::ScheduleDAGInstrs::addEdge(llvm::SUnit*, llvm::SDep const&) + 56
6  clang++   0x0000559104e2176c llvm::fuseInstructionPair(llvm::ScheduleDAGInstrs&, llvm::SUnit&, llvm::SUnit&) + 380
7  clang++   0x0000559104e21b93
8  clang++   0x0000559104dbb72c llvm::ScheduleDAGMILive::schedule() + 60
9  clang++   0x0000559104dc5b49
10 clang++   0x0000559104dc5167
11 clang++   0x0000559104d57213 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 755
12 clang++   0x00005591052e2994 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1348
13 clang++   0x00005591052ec0e3 llvm::FPPassManager::runOnModule(llvm::Module&) + 51
14 clang++   0x00005591052e39e9 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 3257
15 clang++   0x0000559106122d4a clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8090
16 clang++   0x000055910613df7c clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2908
17 clang++   0x00005591077a28a9 clang::ParseAST(clang::Sema&, bool, bool) + 937
18 clang++   0x000055910664c3ed clang::FrontendAction::Execute() + 29
19 clang++   0x0000559106584e60 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1184
20 clang++   0x00005591067531b2 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
21 clang++   0x000055910456256f cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8239
22 clang++   0x000055910455e9bf
23 clang++   0x00005591063e2289
24 clang++   0x00005591057bff18 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
25 clang++   0x00005591063e1ed4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
26 clang++   0x00005591063a0498 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
27 clang++   0x00005591063bf14c clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
28 clang++   0x000055910455df19 clang_main(int, char**, llvm::ToolContext const&) + 7369
29 clang++   0x000055910456e58a main + 90
30 libc.so.6 0x00007fd1d0c81d90
31 libc.so.6 0x00007fd1d0c81e40 __libc_start_main + 128
32 clang++   0x00005591045507a5 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/ExtractCallbackConsole-c56c93.cpp
clang++: note: diagnostic msg: /tmp/ExtractCallbackConsole-c56c93.sh
clang++: note: diagnostic msg: 

********************
ninja: build stopped: subcommand failed.


STDERR:
