MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O3 stage2" failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O3.cmake
-- The C compiler identification is unknown
-- The CXX compiler identification is unknown
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - failed
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang - broken
-- Configuring incomplete, errors occurred!
See also "/tmp/llvm-test-suite-build/CMakeFiles/CMakeOutput.log".
See also "/tmp/llvm-test-suite-build/CMakeFiles/CMakeError.log".
ninja: Entering directory `/tmp/llvm-test-suite-build'


STDERR:
CMake Error at /usr/share/cmake-3.22/Modules/CMakeTestCCompiler.cmake:69 (message):
  The C compiler

    "/tmp/llvm-project-build-stage2/bin/clang"

  is not able to compile a simple test program.

  It fails with the following output:

    Change Dir: /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp
    
    Run Build Command(s):/usr/bin/ninja cmTC_1ca13 && [1/2] Building C object CMakeFiles/cmTC_1ca13.dir/testCCompiler.c.o
    FAILED: CMakeFiles/cmTC_1ca13.dir/testCCompiler.c.o 
    /tmp/llvm-project-build-stage2/bin/clang    -o CMakeFiles/cmTC_1ca13.dir/testCCompiler.c.o -c /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c
    PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
    Stack dump:
    0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang -o CMakeFiles/cmTC_1ca13.dir/testCCompiler.c.o -c /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c
    1.	<eof> parser at end of file
    2.	/tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c:9:5: LLVM IR generation of declaration 'main'
    3.	/tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c:9:5: Generating code for declaration 'main'
    Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
    0  clang     0x000055841e998b58 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
    1  clang     0x000055841e99601e llvm::sys::RunSignalHandlers() + 238
    2  clang     0x000055841e8faa77
    3  libc.so.6 0x00007f1c63847520
    4  clang     0x000055841e935546 llvm::StringMapImpl::LookupBucketFor(llvm::StringRef, unsigned int) + 22
    5  clang     0x000055841e48dded llvm::ValueSymbolTable::reinsertValue(llvm::Value*) + 189
    6  clang     0x000055841e3ce0f9 llvm::Function::Function(llvm::FunctionType*, llvm::GlobalValue::LinkageTypes, unsigned int, llvm::Twine const&, llvm::Module*) + 617
    7  clang     0x000055841ebf8272 clang::CodeGen::CodeGenModule::GetOrCreateLLVMFunction(llvm::StringRef, llvm::Type*, clang::GlobalDecl, bool, bool, bool, llvm::AttributeList, clang::CodeGen::ForDefinition_t) + 1538
    8  clang     0x000055841ec00c2f clang::CodeGen::CodeGenModule::GetAddrOfFunction(clang::GlobalDecl, llvm::Type*, bool, bool, clang::CodeGen::ForDefinition_t) + 239
    9  clang     0x000055841ebfdfd9 clang::CodeGen::CodeGenModule::EmitGlobalFunctionDefinition(clang::GlobalDecl, llvm::GlobalValue*) + 137
    10 clang     0x000055841ebf4758 clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl, llvm::GlobalValue*) + 1000
    11 clang     0x000055841ebfa604 clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) + 1508
    12 clang     0x000055841ebf3170 clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) + 144
    13 clang     0x000055841f2ad59c
    14 clang     0x000055841f2a538e clang::BackendConsumer::HandleTopLevelDecl(clang::DeclGroupRef) + 334
    15 clang     0x00005584208db86a clang::ParseAST(clang::Sema&, bool, bool) + 1162
    16 clang     0x000055841f7c006d clang::FrontendAction::Execute() + 29
    17 clang     0x000055841f6f89c0 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1184
    18 clang     0x000055841f8c7a62 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
    19 clang     0x000055841d6a8173 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8547
    20 clang     0x000055841d6a448f
    21 clang     0x000055841f5539a9
    22 clang     0x000055841e8fa638 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
    23 clang     0x000055841f5535f4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
    24 clang     0x000055841f510ec8 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
    25 clang     0x000055841f53064c clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
    26 clang     0x000055841d6a39eb clang_main(int, char**, llvm::ToolContext const&) + 7323
    27 clang     0x000055841d6b417a main + 90
    28 libc.so.6 0x00007f1c6382ed90
    29 libc.so.6 0x00007f1c6382ee40 __libc_start_main + 128
    30 clang     0x000055841d6962a5 _start + 37
    clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
    clang version 21.0.0git
    Target: x86_64-unknown-linux-gnu
    Thread model: posix
    InstalledDir: /tmp/llvm-project-build-stage2/bin
    clang: note: diagnostic msg: 
    ********************
    
    PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
    Preprocessed source(s) and associated run script(s) are located at:
    clang: note: diagnostic msg: /tmp/testCCompiler-bf815a.c
    clang: note: diagnostic msg: /tmp/testCCompiler-bf815a.sh
    clang: note: diagnostic msg: 
    
    ********************
    ninja: build stopped: subcommand failed.
    
    

  

  CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
  CMakeLists.txt:6 (project)


ninja: error: loading 'build.ninja': No such file or directory
MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O0-g stage2" failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O0-g.cmake
-- The C compiler identification is unknown
-- The CXX compiler identification is unknown
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - failed
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang - broken
-- Configuring incomplete, errors occurred!
See also "/tmp/llvm-test-suite-build/CMakeFiles/CMakeOutput.log".
See also "/tmp/llvm-test-suite-build/CMakeFiles/CMakeError.log".
ninja: Entering directory `/tmp/llvm-test-suite-build'


STDERR:
CMake Error at /usr/share/cmake-3.22/Modules/CMakeTestCCompiler.cmake:69 (message):
  The C compiler

    "/tmp/llvm-project-build-stage2/bin/clang"

  is not able to compile a simple test program.

  It fails with the following output:

    Change Dir: /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp
    
    Run Build Command(s):/usr/bin/ninja cmTC_b45fa && [1/2] Building C object CMakeFiles/cmTC_b45fa.dir/testCCompiler.c.o
    FAILED: CMakeFiles/cmTC_b45fa.dir/testCCompiler.c.o 
    /tmp/llvm-project-build-stage2/bin/clang    -o CMakeFiles/cmTC_b45fa.dir/testCCompiler.c.o -c /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c
    PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
    Stack dump:
    0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang -o CMakeFiles/cmTC_b45fa.dir/testCCompiler.c.o -c /tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c
    1.	<eof> parser at end of file
    2.	/tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c:9:5: LLVM IR generation of declaration 'main'
    3.	/tmp/llvm-test-suite-build/CMakeFiles/CMakeTmp/testCCompiler.c:9:5: Generating code for declaration 'main'
    Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
    0  clang     0x00005630bdb09b58 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
    1  clang     0x00005630bdb0701e llvm::sys::RunSignalHandlers() + 238
    2  clang     0x00005630bda6ba77
    3  libc.so.6 0x00007efe6a85f520
    4  clang     0x00005630bdaa6546 llvm::StringMapImpl::LookupBucketFor(llvm::StringRef, unsigned int) + 22
    5  clang     0x00005630bd5feded llvm::ValueSymbolTable::reinsertValue(llvm::Value*) + 189
    6  clang     0x00005630bd53f0f9 llvm::Function::Function(llvm::FunctionType*, llvm::GlobalValue::LinkageTypes, unsigned int, llvm::Twine const&, llvm::Module*) + 617
    7  clang     0x00005630bdd69272 clang::CodeGen::CodeGenModule::GetOrCreateLLVMFunction(llvm::StringRef, llvm::Type*, clang::GlobalDecl, bool, bool, bool, llvm::AttributeList, clang::CodeGen::ForDefinition_t) + 1538
    8  clang     0x00005630bdd71c2f clang::CodeGen::CodeGenModule::GetAddrOfFunction(clang::GlobalDecl, llvm::Type*, bool, bool, clang::CodeGen::ForDefinition_t) + 239
    9  clang     0x00005630bdd6efd9 clang::CodeGen::CodeGenModule::EmitGlobalFunctionDefinition(clang::GlobalDecl, llvm::GlobalValue*) + 137
    10 clang     0x00005630bdd65758 clang::CodeGen::CodeGenModule::EmitGlobalDefinition(clang::GlobalDecl, llvm::GlobalValue*) + 1000
    11 clang     0x00005630bdd6b604 clang::CodeGen::CodeGenModule::EmitGlobal(clang::GlobalDecl) + 1508
    12 clang     0x00005630bdd64170 clang::CodeGen::CodeGenModule::EmitTopLevelDecl(clang::Decl*) + 144
    13 clang     0x00005630be41e59c
    14 clang     0x00005630be41638e clang::BackendConsumer::HandleTopLevelDecl(clang::DeclGroupRef) + 334
    15 clang     0x00005630bfa4c86a clang::ParseAST(clang::Sema&, bool, bool) + 1162
    16 clang     0x00005630be93106d clang::FrontendAction::Execute() + 29
    17 clang     0x00005630be8699c0 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1184
    18 clang     0x00005630bea38a62 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
    19 clang     0x00005630bc819173 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8547
    20 clang     0x00005630bc81548f
    21 clang     0x00005630be6c49a9
    22 clang     0x00005630bda6b638 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
    23 clang     0x00005630be6c45f4 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
    24 clang     0x00005630be681ec8 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
    25 clang     0x00005630be6a164c clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 732
    26 clang     0x00005630bc8149eb clang_main(int, char**, llvm::ToolContext const&) + 7323
    27 clang     0x00005630bc82517a main + 90
    28 libc.so.6 0x00007efe6a846d90
    29 libc.so.6 0x00007efe6a846e40 __libc_start_main + 128
    30 clang     0x00005630bc8072a5 _start + 37
    clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
    clang version 21.0.0git
    Target: x86_64-unknown-linux-gnu
    Thread model: posix
    InstalledDir: /tmp/llvm-project-build-stage2/bin
    clang: note: diagnostic msg: 
    ********************
    
    PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
    Preprocessed source(s) and associated run script(s) are located at:
    clang: note: diagnostic msg: /tmp/testCCompiler-5424cb.c
    clang: note: diagnostic msg: /tmp/testCCompiler-5424cb.sh
    clang: note: diagnostic msg: 
    
    ********************
    ninja: build stopped: subcommand failed.
    
    

  

  CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
  CMakeLists.txt:6 (project)


ninja: error: loading 'build.ninja': No such file or directory
