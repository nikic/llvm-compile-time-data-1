MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh ReleaseLTO-g stage1 " failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/ReleaseLTO-g.cmake
-- The C compiler identification is Clang 21.0.0
-- The CXX compiler identification is Clang 21.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage1/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage1/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: x86
-- Check target system architecture: unknown
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating HashProgramOutput.sh
[3/671] Generating timeit
[4/671] Generating timeit-target
[5/671] Generating __init__.py
[6/671] Generating modules/codesize.py
[7/671] Generating modules/compiletime.py
[8/671] Generating modules/__init__.py
[9/671] Generating modules/hash.py
[10/671] Generating modules/hpmcount.py
[11/671] Generating modules/perf.py
[12/671] Generating modules/microbenchmark.py
[13/671] Generating modules/remote.py
[14/671] Generating modules/run.py
[15/671] Generating modules/profilegen.py
[16/671] Generating modules/run_under.py
[17/671] Generating modules/timeit.py
[18/671] Generating modules/stats.py
[19/671] Generating test.py
[20/671] Generating shellcommand.py
[21/671] Generating testplan.py
[22/671] Generating testfile.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
[26/671] Linking C executable tools/fpcmp-target
FAILED: tools/fpcmp-target 
: && /tmp/llvm-project-build-stage1/bin/clang -O3 -fomit-frame-pointer -flto -DNDEBUG -g  tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -o tools/fpcmp-target   && :
clang: error: unable to execute command: Segmentation fault (core dumped)
clang: error: linker command failed due to signal (use -v to see invocation)
[27/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
[28/671] Generating sqlite test inputs
ninja: build stopped: subcommand failed.


STDERR:
MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O0-g stage1 " failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O0-g.cmake
-- The C compiler identification is Clang 21.0.0
-- The CXX compiler identification is Clang 21.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage1/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage1/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: x86
-- Check target system architecture: unknown
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating HashProgramOutput.sh
[3/671] Generating timeit
[4/671] Generating timeit-target
[5/671] Generating __init__.py
[6/671] Generating modules/__init__.py
[7/671] Generating modules/codesize.py
[8/671] Generating modules/compiletime.py
[9/671] Generating modules/hpmcount.py
[10/671] Generating modules/hash.py
[11/671] Generating modules/microbenchmark.py
[12/671] Generating modules/perf.py
[13/671] Generating modules/run.py
[14/671] Generating modules/profilegen.py
[15/671] Generating modules/remote.py
[16/671] Generating modules/run_under.py
[17/671] Generating modules/stats.py
[18/671] Generating modules/timeit.py
[19/671] Generating shellcommand.py
[20/671] Generating test.py
[21/671] Generating testfile.py
[22/671] Generating testplan.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
FAILED: tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o 
/tmp/llvm-project-build-stage1/bin/clang -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage1/bin/clang -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c'.
4.	Running pass 'X86 Assembly Printer' on function '@load_file'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000557a052473a0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 240
1  clang     0x0000557a05245294 llvm::sys::CleanupOnSignal(unsigned long) + 164
2  clang     0x0000557a05196ca8
3  libc.so.6 0x00007fd37ef16520
4  clang     0x0000557a0614c9b8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 1720
5  clang     0x0000557a06111981 llvm::AsmPrinter::emitFunctionBody() + 721
6  clang     0x0000557a03a90529
7  clang     0x0000557a046ed9a8
8  clang     0x0000557a04cacd62 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1666
9  clang     0x0000557a04cacf24 llvm::FPPassManager::runOnModule(llvm::Module&) + 52
10 clang     0x0000557a04cad994 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 1124
11 clang     0x0000557a054d9a42
12 clang     0x0000557a054da523 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 2275
13 clang     0x0000557a05b51a73 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 1555
14 clang     0x0000557a06fb4bcc clang::ParseAST(clang::Sema&, bool, bool) + 1164
15 clang     0x0000557a05e95bce clang::FrontendAction::Execute() + 46
16 clang     0x0000557a05e04a5b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 555
17 clang     0x0000557a05f70f0c clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 364
18 clang     0x0000557a03a8228c cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7884
19 clang     0x0000557a03a796f2
20 clang     0x0000557a05bc6c6d
21 clang     0x0000557a051970d7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 39
22 clang     0x0000557a05bc7007
23 clang     0x0000557a05b89061 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 177
24 clang     0x0000557a05b8a0d9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 153
25 clang     0x0000557a05b9e51f clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 543
26 clang     0x0000557a03a7e235 clang_main(int, char**, llvm::ToolContext const&) + 7509
27 clang     0x0000557a0398ec5b main + 107
28 libc.so.6 0x00007fd37eefdd90
29 libc.so.6 0x00007fd37eefde40 __libc_start_main + 128
30 clang     0x0000557a03a79155 _start + 37
clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage1/bin
clang: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang: note: diagnostic msg: /tmp/fpcmp-fde196.c
clang: note: diagnostic msg: /tmp/fpcmp-fde196.sh
clang: note: diagnostic msg: 

********************
[26/671] Generating sqlite test inputs
[27/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
FAILED: tools/CMakeFiles/not.dir/not.cpp.o 
/tmp/llvm-project-build-stage1/bin/clang++ -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage1/bin/clang++ -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp'.
4.	Running pass 'X86 Assembly Printer' on function '@main'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x0000564e7fe7c3a0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 240
1  clang++   0x0000564e7fe7a294 llvm::sys::CleanupOnSignal(unsigned long) + 164
2  clang++   0x0000564e7fdcbca8
3  libc.so.6 0x00007f3527d1d520
4  clang++   0x0000564e80d819b8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 1720
5  clang++   0x0000564e80d46981 llvm::AsmPrinter::emitFunctionBody() + 721
6  clang++   0x0000564e7e6c5529
7  clang++   0x0000564e7f3229a8
8  clang++   0x0000564e7f8e1d62 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1666
9  clang++   0x0000564e7f8e1f24 llvm::FPPassManager::runOnModule(llvm::Module&) + 52
10 clang++   0x0000564e7f8e2994 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 1124
11 clang++   0x0000564e8010ea42
12 clang++   0x0000564e8010f523 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 2275
13 clang++   0x0000564e80786a73 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 1555
14 clang++   0x0000564e81be9bcc clang::ParseAST(clang::Sema&, bool, bool) + 1164
15 clang++   0x0000564e80acabce clang::FrontendAction::Execute() + 46
16 clang++   0x0000564e80a39a5b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 555
17 clang++   0x0000564e80ba5f0c clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 364
18 clang++   0x0000564e7e6b728c cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7884
19 clang++   0x0000564e7e6ae6f2
20 clang++   0x0000564e807fbc6d
21 clang++   0x0000564e7fdcc0d7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 39
22 clang++   0x0000564e807fc007
23 clang++   0x0000564e807be061 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 177
24 clang++   0x0000564e807bf0d9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 153
25 clang++   0x0000564e807d351f clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 543
26 clang++   0x0000564e7e6b3235 clang_main(int, char**, llvm::ToolContext const&) + 7509
27 clang++   0x0000564e7e5c3c5b main + 107
28 libc.so.6 0x00007f3527d04d90
29 libc.so.6 0x00007f3527d04e40 __libc_start_main + 128
30 clang++   0x0000564e7e6ae155 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage1/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/not-8dcee4.cpp
clang++: note: diagnostic msg: /tmp/not-8dcee4.sh
clang++: note: diagnostic msg: 

********************
ninja: build stopped: subcommand failed.


STDERR:
MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O0-g stage1 aarch64" failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O0-g.cmake
-- The C compiler identification is Clang 21.0.0
-- The CXX compiler identification is Clang 21.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage1/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage1/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: AArch64
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_LIBRARY TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_LIBRARY TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating HashProgramOutput.sh
[3/671] Generating timeit
[4/671] Generating timeit-target
[5/671] Generating modules/__init__.py
[6/671] Generating modules/codesize.py
[7/671] Generating __init__.py
[8/671] Generating modules/compiletime.py
[9/671] Generating modules/microbenchmark.py
[10/671] Generating modules/hash.py
[11/671] Generating modules/hpmcount.py
[12/671] Generating modules/perf.py
[13/671] Generating modules/profilegen.py
[14/671] Generating modules/remote.py
[15/671] Generating modules/run_under.py
[16/671] Generating modules/run.py
[17/671] Generating modules/stats.py
[18/671] Generating shellcommand.py
[19/671] Generating test.py
[20/671] Generating modules/timeit.py
[21/671] Generating testfile.py
[22/671] Generating testplan.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
FAILED: tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o 
/tmp/llvm-project-build-stage1/bin/clang --target=aarch64-linux-gnu -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage1/bin/clang --target=aarch64-linux-gnu -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c'.
4.	Running pass 'AArch64 Assembly Printer' on function '@load_file'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000563b2acdb3a0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 240
1  clang     0x0000563b2acd9294 llvm::sys::CleanupOnSignal(unsigned long) + 164
2  clang     0x0000563b2ac2aca8
3  libc.so.6 0x00007febff029520
4  clang     0x0000563b2bbe09b8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 1720
5  clang     0x0000563b2bba5981 llvm::AsmPrinter::emitFunctionBody() + 721
6  clang     0x0000563b2998876d
7  clang     0x0000563b2a1819a8
8  clang     0x0000563b2a740d62 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1666
9  clang     0x0000563b2a740f24 llvm::FPPassManager::runOnModule(llvm::Module&) + 52
10 clang     0x0000563b2a741994 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 1124
11 clang     0x0000563b2af6da42
12 clang     0x0000563b2af6e523 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 2275
13 clang     0x0000563b2b5e5a73 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 1555
14 clang     0x0000563b2ca48bcc clang::ParseAST(clang::Sema&, bool, bool) + 1164
15 clang     0x0000563b2b929bce clang::FrontendAction::Execute() + 46
16 clang     0x0000563b2b898a5b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 555
17 clang     0x0000563b2ba04f0c clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 364
18 clang     0x0000563b2951628c cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7884
19 clang     0x0000563b2950d6f2
20 clang     0x0000563b2b65ac6d
21 clang     0x0000563b2ac2b0d7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 39
22 clang     0x0000563b2b65b007
23 clang     0x0000563b2b61d061 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 177
24 clang     0x0000563b2b61e0d9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 153
25 clang     0x0000563b2b63251f clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 543
26 clang     0x0000563b29512235 clang_main(int, char**, llvm::ToolContext const&) + 7509
27 clang     0x0000563b29422c5b main + 107
28 libc.so.6 0x00007febff010d90
29 libc.so.6 0x00007febff010e40 __libc_start_main + 128
30 clang     0x0000563b2950d155 _start + 37
clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: aarch64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage1/bin
clang: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang: note: diagnostic msg: /tmp/fpcmp-a14618.c
clang: note: diagnostic msg: /tmp/fpcmp-a14618.sh
clang: note: diagnostic msg: 

********************
[26/671] Generating sqlite test inputs
[27/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
FAILED: tools/CMakeFiles/not.dir/not.cpp.o 
/tmp/llvm-project-build-stage1/bin/clang++ --target=aarch64-linux-gnu -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage1/bin/clang++ --target=aarch64-linux-gnu -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp'.
4.	Running pass 'AArch64 Assembly Printer' on function '@__cxx_global_var_init'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x000055a622af03a0 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 240
1  clang++   0x000055a622aee294 llvm::sys::CleanupOnSignal(unsigned long) + 164
2  clang++   0x000055a622a3fca8
3  libc.so.6 0x00007f5714c52520
4  clang++   0x000055a6239f59b8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 1720
5  clang++   0x000055a6239ba981 llvm::AsmPrinter::emitFunctionBody() + 721
6  clang++   0x000055a62179d76d
7  clang++   0x000055a621f969a8
8  clang++   0x000055a622555d62 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1666
9  clang++   0x000055a622555f24 llvm::FPPassManager::runOnModule(llvm::Module&) + 52
10 clang++   0x000055a622556994 llvm::legacy::PassManagerImpl::run(llvm::Module&) + 1124
11 clang++   0x000055a622d82a42
12 clang++   0x000055a622d83523 clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 2275
13 clang++   0x000055a6233faa73 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 1555
14 clang++   0x000055a62485dbcc clang::ParseAST(clang::Sema&, bool, bool) + 1164
15 clang++   0x000055a62373ebce clang::FrontendAction::Execute() + 46
16 clang++   0x000055a6236ada5b clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 555
17 clang++   0x000055a623819f0c clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 364
18 clang++   0x000055a62132b28c cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 7884
19 clang++   0x000055a6213226f2
20 clang++   0x000055a62346fc6d
21 clang++   0x000055a622a400d7 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 39
22 clang++   0x000055a623470007
23 clang++   0x000055a623432061 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 177
24 clang++   0x000055a6234330d9 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 153
25 clang++   0x000055a62344751f clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 543
26 clang++   0x000055a621327235 clang_main(int, char**, llvm::ToolContext const&) + 7509
27 clang++   0x000055a621237c5b main + 107
28 libc.so.6 0x00007f5714c39d90
29 libc.so.6 0x00007f5714c39e40 __libc_start_main + 128
30 clang++   0x000055a621322155 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: aarch64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage1/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/not-2964de.cpp
clang++: note: diagnostic msg: /tmp/not-2964de.sh
clang++: note: diagnostic msg: 

********************
ninja: build stopped: subcommand failed.


STDERR:
MESSAGE: Execution of "sudo -u lctt-runner ./build_llvm_test_suite.sh O0-g stage2 " failed

STDOUT:
loading initial cache file ./llvm-test-suite/cmake/caches/O0-g.cmake
-- The C compiler identification is Clang 21.0.0
-- The CXX compiler identification is Clang 21.0.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /tmp/llvm-project-build-stage2/bin/clang - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /tmp/llvm-project-build-stage2/bin/clang++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES) 
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES) 
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND) 
-- Check target operating system - Linux
-- Check target system architecture: x86
-- Check target system architecture: unknown
-- Adding directory CTMark
-- Found Intl: built in to C library  
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS
-- Performing Test COMPILER_HAS_NO_DEFINE_TARGET_OS_MACROS - Success
-- Found Tclsh: /bin/tclsh (found version "8.6") 
-- Could NOT find TCL (missing: TCL_INCLUDE_PATH) 
-- Could NOT find TCLTK (missing: TCL_INCLUDE_PATH TK_LIBRARY TK_INCLUDE_PATH) 
-- Could NOT find TK (missing: TK_LIBRARY TK_INCLUDE_PATH) 
-- Configuring done
-- Generating done
-- Build files have been written to: /tmp/llvm-test-suite-build
ninja: Entering directory `/tmp/llvm-test-suite-build'
[1/671] Generating ../lit.cfg
[2/671] Generating timeit
[3/671] Generating timeit-target
[4/671] Generating HashProgramOutput.sh
[5/671] Generating __init__.py
[6/671] Generating modules/__init__.py
[7/671] Generating modules/codesize.py
[8/671] Generating modules/compiletime.py
[9/671] Generating modules/perf.py
[10/671] Generating modules/hash.py
[11/671] Generating modules/hpmcount.py
[12/671] Generating modules/microbenchmark.py
[13/671] Generating modules/profilegen.py
[14/671] Generating modules/remote.py
[15/671] Generating modules/run.py
[16/671] Generating modules/run_under.py
[17/671] Generating modules/timeit.py
[18/671] Generating modules/stats.py
[19/671] Generating shellcommand.py
[20/671] Generating test.py
[21/671] Generating testplan.py
[22/671] Generating testfile.py
[23/671] [TEST_SUITE_HOST_CC] Compiling host source fpcmp.c
[24/671] [TEST_SUITE_HOST_CC] Linking host executable fpcmp
[25/671] Building C object tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o
FAILED: tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o 
/tmp/llvm-project-build-stage2/bin/clang -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -MF tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o.d -o tools/CMakeFiles/fpcmp-target.dir/fpcmp.c.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/fpcmp.c'.
4.	Running pass 'X86 Assembly Printer' on function '@load_file'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x000055a1dad0f558 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang     0x000055a1dad0ca1e llvm::sys::RunSignalHandlers() + 238
2  clang     0x000055a1dac708c7
3  libc.so.6 0x00007ff8463a9520
4  clang     0x000055a1dbe6e1d8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 392
5  clang     0x000055a1dbe415fd llvm::AsmPrinter::emitFunctionBody() + 2749
6  clang     0x000055a1d99f20c1
7  clang     0x000055a1da2155d3 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 995
8  clang     0x000055a1da78b0e4 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1348
9  clang     0x000055a1da794a3c llvm::FPPassManager::runOnModule(llvm::Module&) + 44
10 clang     0x000055a1da78c0dc llvm::legacy::PassManagerImpl::run(llvm::Module&) + 3164
11 clang     0x000055a1db51bf3b clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8187
12 clang     0x000055a1db532e60 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2912
13 clang     0x000055a1dcd068e9 clang::ParseAST(clang::Sema&, bool, bool) + 937
14 clang     0x000055a1dbb544fd clang::FrontendAction::Execute() + 29
15 clang     0x000055a1dba88570 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1200
16 clang     0x000055a1dbc5ff62 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
17 clang     0x000055a1d99e517e cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8398
18 clang     0x000055a1d99e152f
19 clang     0x000055a1db8c8209
20 clang     0x000055a1dac703c8 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
21 clang     0x000055a1db8c7e44 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
22 clang     0x000055a1db884b98 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
23 clang     0x000055a1db8a40bb clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 763
24 clang     0x000055a1d99e0a9e clang_main(int, char**, llvm::ToolContext const&) + 7502
25 clang     0x000055a1d99f1d9a main + 90
26 libc.so.6 0x00007ff846390d90
27 libc.so.6 0x00007ff846390e40 __libc_start_main + 128
28 clang     0x000055a1d99d32a5 _start + 37
clang: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang: note: diagnostic msg: /tmp/fpcmp-78a21d.c
clang: note: diagnostic msg: /tmp/fpcmp-78a21d.sh
clang: note: diagnostic msg: 

********************
[26/671] Building CXX object tools/CMakeFiles/not.dir/not.cpp.o
FAILED: tools/CMakeFiles/not.dir/not.cpp.o 
/tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG  -O0 -g   -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /tmp/llvm-project-build-stage2/bin/clang++ -DNDEBUG -O0 -g -w -Werror=date-time -MD -MT tools/CMakeFiles/not.dir/not.cpp.o -MF tools/CMakeFiles/not.dir/not.cpp.o.d -o tools/CMakeFiles/not.dir/not.cpp.o -c /var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/var/llvm-compile-time-tracker/llvm-test-suite/tools/not.cpp'.
4.	Running pass 'X86 Assembly Printer' on function '@main'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang++   0x000055fe90739558 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  clang++   0x000055fe90736a1e llvm::sys::RunSignalHandlers() + 238
2  clang++   0x000055fe9069a8c7
3  libc.so.6 0x00007f4c96199520
4  clang++   0x000055fe918981d8 llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*) + 392
5  clang++   0x000055fe9186b5fd llvm::AsmPrinter::emitFunctionBody() + 2749
6  clang++   0x000055fe8f41c0c1
7  clang++   0x000055fe8fc3f5d3 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 995
8  clang++   0x000055fe901b50e4 llvm::FPPassManager::runOnFunction(llvm::Function&) + 1348
9  clang++   0x000055fe901bea3c llvm::FPPassManager::runOnModule(llvm::Module&) + 44
10 clang++   0x000055fe901b60dc llvm::legacy::PassManagerImpl::run(llvm::Module&) + 3164
11 clang++   0x000055fe90f45f3b clang::emitBackendOutput(clang::CompilerInstance&, clang::CodeGenOptions&, llvm::StringRef, llvm::Module*, clang::BackendAction, llvm::IntrusiveRefCntPtr<llvm::vfs::FileSystem>, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>, clang::BackendConsumer*) + 8187
12 clang++   0x000055fe90f5ce60 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) + 2912
13 clang++   0x000055fe927308e9 clang::ParseAST(clang::Sema&, bool, bool) + 937
14 clang++   0x000055fe9157e4fd clang::FrontendAction::Execute() + 29
15 clang++   0x000055fe914b2570 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1200
16 clang++   0x000055fe91689f62 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 738
17 clang++   0x000055fe8f40f17e cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 8398
18 clang++   0x000055fe8f40b52f
19 clang++   0x000055fe912f2209
20 clang++   0x000055fe9069a3c8 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 136
21 clang++   0x000055fe912f1e44 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const + 356
22 clang++   0x000055fe912aeb98 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 552
23 clang++   0x000055fe912ce0bb clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 763
24 clang++   0x000055fe8f40aa9e clang_main(int, char**, llvm::ToolContext const&) + 7502
25 clang++   0x000055fe8f41bd9a main + 90
26 libc.so.6 0x00007f4c96180d90
27 libc.so.6 0x00007f4c96180e40 __libc_start_main + 128
28 clang++   0x000055fe8f3fd2a5 _start + 37
clang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 21.0.0git
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /tmp/llvm-project-build-stage2/bin
clang++: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang++: note: diagnostic msg: /tmp/not-4efbb3.cpp
clang++: note: diagnostic msg: /tmp/not-4efbb3.sh
clang++: note: diagnostic msg: 

********************
[27/671] Generating sqlite test inputs
ninja: build stopped: subcommand failed.


STDERR:
